// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

enum user_status {
  active
  blocked
}

enum user_role {
  user
  admin
}

model Users {
  id         Int    @id @default(autoincrement())     
  email      String        @unique
  password   String        @unique
  status     user_status   @default(active)
  role       user_role     @default(user)
  profile    Profile?

  orders     Order[]   
  // Каждый пользователь имеет один профиль
}

// Профиль принадлежит конкретному пользователю
model Profile {
  id           Int      @id @default(autoincrement())
  user         Users     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  name         String
  last_name    String
  phone        String
  citizenship  String
  residence    String
}


// Определение модели для таблицы "orders"
model Order {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int      @unique
  car       Car      @relation(fields: [carId], references: [id])
  carId     Int
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  payment   Payment  @relation(fields: [paymentId], references: [id])
  paymentId Int
  //Payment Payments[]
}

// Определение модели для таблицы "payment"
model Payment {
  id       Int      @id @default(autoincrement())
  method   String
  orders     Order[] 
}

// Определение модели для таблицы "car"
model Car {
  id              Int           @id @default(autoincrement())
  type            Type          @relation(fields: [typeId], references: [id])
  typeId          Int
  tarif           Tarif         @relation(fields: [tarifId], references: [id])
  tarifId         Int
  transmission    Transmission  @relation(fields: [transmissionId], references: [id])
  transmissionId  Int
  model           Model         @relation(fields: [modelId], references: [id])
  modelId         Int
  photo           Photo         @relation(fields: [photoId], references: [id])
  photoId         Int

  orders          Order[]
}

// Определение модели для таблицы "type"
model Type {
  id           Int     @id @default(autoincrement())
  type         String
  numberOfSeats Float
  typeEngine   String
  fuelRate     Float

  cars      Car[]
}

// Определение модели для таблицы "model"
model Model {
  id   Int    @id @default(autoincrement())
  name String
  year Float

  cars      Car[]
}

// Определение модели для таблицы "tarif"
model Tarif {
  id        Int    @id @default(autoincrement())
  costDay   Float
  cost3Day  Float
  costWeek  Float

  cars      Car[]
}

// Определение модели для таблицы "transmission"
model Transmission {
  id            Int     @id @default(autoincrement())
  transmission  String

  cars      Car[]
}

// Определение модели для таблицы "photo"
model Photo {
  id      Int    @id @default(autoincrement())
  photo  Bytes
  
  cars      Car[]
}